---
- name: "Create K8sMaster Instance"
  hosts: localhost
  become: yes
  become_user: root 
  vars_files:
          - secret.yml
          - master.yml
            #vars:
            #     ansible_python_interpreter: /usr/bin/python
                  #inventory: inventory.txt
  tasks:
          - package:
                  name: 
                   - "python3"
                   - "python2-pip"
                  state: present
          - pip:
                  name: "{{ item }}"
            loop:
                    - boto
                    - boto3
          - name: " Creating instance"
            ec2:
                    instance_tags:
                            Name: "{{ i_name }}"
                            tag: "{{ tag }}"
                    key_name: "{{ key }}"
                    instance_type: "{{ i_type }}"
                    image: "{{ img }}"
                    wait: yes
                    group_id: "{{ sg }}"
                    vpc_subnet_id: "{{ subnet }}"
                    assign_public_ip: yes
                    aws_access_key: "{{ pass }}"
                    aws_secret_key: "{{ secret_pass }}"
                    count: "{{ counts }}" 
                    region: "{{ zone }}"
            register: ip

          - block:
                  - name: "updating topic"
                    shell: "grep '{{ grp_tag }}' {{ inventory }}"
                    changed_when: false
            rescue:
                  - name: "Creating group tag"
                    shell: "echo -e '\n[{{ grp_tag }}]' | cat >> {{ inventory }}"
          - name: "updating Inventory"
            lineinfile:
                  dest: "{{ inventory }}"
                  regexp: '^[{{ grp_tag }}]'
                  line: "{{ item ['public_ip'] }} ansible_user=ec2-user ansible_ssh_private_key_file={{ ssh_key_full_path }}  ansible-connection=ssh #{{ tag }}"
            when: ip.changed == true 
            loop: "{{ ip.instances }}"
          - meta: refresh_inventory
- name: "Create K8sSlave Instance"
  hosts: localhost
  become: yes
  become_user: root 
  vars_files:
          - secret.yml
          - slave.yml
            #vars:
            #     ansible_python_interpreter: /usr/bin/python
                  #inventory: inventory.txt
  tasks:
          - name: " Creating instance"
            ec2:
                    instance_tags:
                            Name: "{{ i_name }}"
                            tag: "{{ tag }}"
                    key_name: "{{ key }}"
                    instance_type: "{{ i_type }}"
                    image: "{{ img }}"
                    wait: yes
                    group_id: "{{ sg }}"
                    vpc_subnet_id: "{{ subnet }}"
                    assign_public_ip: yes
                    aws_access_key: "{{ pass }}"
                    aws_secret_key: "{{ secret_pass }}"
                    count: "{{ counts }}" 
                    region: "{{ zone }}"
            register: ip

          - block:
                  - name: "updating topic"
                    shell: "grep '{{ grp_tag }}' {{ inventory }}"
                    changed_when: false
            rescue:
                  - name: "Creating group tag"
                    shell: "echo -e '\n[{{ grp_tag }}]' | cat >> {{ inventory }}"
          - name: "updating Inventory"
            lineinfile:
                  dest: "{{ inventory }}"
                  regexp: '^[{{ grp_tag }}]'
                  line: "{{ item ['public_ip'] }} ansible_user=ec2-user ansible_ssh_private_key_file={{ ssh_key_full_path }}  ansible-connection=ssh #{{ tag }}"
            when: ip.changed == true 
            loop: "{{ ip.instances }}"
          - meta: refresh_inventory

- hosts: k8sMasterA
  become_user: root
  become_method: sudo
  become: yes
  tasks:
  - name: "yum configure"
    yum_repository:
            name: "kubernetes"
            description: "kubernetes repo"
            baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
            enabled: yes
            gpgcheck: yes
            repo_gpgcheck: yes
            gpgkey:
                - https://packages.cloud.google.com/yum/doc/yum-key.gpg
                - https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
                  #exclude: kubelet kubeadm kubectl
  - name: "Installing required packages "
    package:
            name:
                    - docker
                    - kubelet
                    - kubeadm
                    - iproute-tc
                    - kubectl
  
  - name: "docker con"
    copy:
            dest: /etc/docker/daemon.json
            content: '{
                         "exec-opts": ["native.cgroupdriver=systemd"]
                     }'
    notify: restart docker 

  - name: "services"
    service:
            name: "{{ item }}"
            state: started
            enabled: yes
    loop: 
      - docker
      - kubelet

  - name: "docker con"
    copy:
            dest: /etc/sysctl.d/k8s.conf
            src: bridge.yml
  - name: "Pulling Images"
    shell:
            cmd: "{{item}}"
    loop:
            - "sysctl --system"
            - "kubeadm config images pull"
  - name: "Checking Kube config"
    shell:
            cmd: "ls -l $HOME/.kube"
    register: x
    ignore_errors: yes
  - name: "k8s inilization"
    shell:
            cmd: "{{item}}"
    loop:
              - "kubeadm init --pod-network-cidr=10.240.0.0/16 --ignore-preflight-errors=NumCPU --ignore-preflight-errors=Mem"
              - "mkdir -p $HOME/.kube"
              - "sudo cp -fi /etc/kubernetes/admin.conf $HOME/.kube/config"
              - "sudo chown $(id -u):$(id -g) $HOME/.kube/config"
              - "kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml"
    when: x.failed
  - name: "Creating Token"
    shell:
            cmd: "kubeadm token create --print-join-command > ~/token.txt"
  - name: "Copying Token"
    fetch:
            dest: "/token.txt"
            src: "~/token.txt"
            flat: yes
  handlers:
  - name: restart docker
    service:
            name: "docker"
            state: restarted


- hosts: k8sSlaveA
  become_user: root
  become_method: sudo
  become: yes
  tasks:
  - name: "yum configure"
    yum_repository:
            name: "kubernetes"
            description: "kubernetes repo"
            baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
            enabled: yes
            gpgcheck: yes
            repo_gpgcheck: yes
            gpgkey:
                - https://packages.cloud.google.com/yum/doc/yum-key.gpg
                - https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
                  #exclude: kubelet kubeadm kubectl
  - name: "Installing required packages "
    package:
            name:
                    - docker
                    - kubelet
                    - kubeadm
                    - iproute-tc
                    - kubectl
  
  - name: "docker con"
    copy:
            dest: /etc/docker/daemon.json
            content: '{
                         "exec-opts": ["native.cgroupdriver=systemd"]
                     }'
    notify: restart docker 


  - name: "services"
    service:
            name: "{{ item }}"
            state: started
            enabled: yes
    loop: 
      - docker
      - kubelet

  - name: "docker con"
    copy:
            dest: /etc/sysctl.d/k8s.conf
            src: bridge.yml
  - name: "Pulling Images"
    shell:
            cmd: "sysctl --system"
  - name: "Copying Token"
    copy:
            src: "/token.txt"
            dest: "~/token.txt"
  - name: "Creating Token"
    shell:
            cmd: "bash ~/token.txt "

  handlers:
  - name: restart docker
    service:
            name: "docker"
            state: restarted
